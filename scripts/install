#!/bin/python3

import glob
import logging
import os
import subprocess

PROJECT_NAME = "no-doze"
PROJECT_ROOT = os.path.abspath("..")
SCRIPTS_DIR = f"{PROJECT_ROOT}/scripts"
INSTALL_DIR = f"/opt/{PROJECT_NAME}"
VENV = INSTALL_DIR + "/venv"
VENV_BIN = VENV + "/bin"

logging.basicConfig(level=logging.INFO)
log = logging.getLogger("no-doze:installer")

def run_without_error(cmd: list[str], error_msg: str) -> str:
    result = subprocess.run(cmd, text=True)
    if result.returncode != 0:
        if result.stderr:
            log.warning(result.stderr)
        log.warning(error_msg)
        exit(1)
    return result.stdout

if os.getuid() != 0:
    log.warning("Install must be run as root.")
    exit(1)

## Prepare installation directory

if not os.path.exists(PROJECT_ROOT) or not PROJECT_ROOT.endswith(f"/{PROJECT_NAME}"):
    log.warning(f"Could not find the {PROJECT_NAME} directory.  Make sure you run this script from the directory it's located in.")
    exit(1)

if os.path.exists(INSTALL_DIR) and os.listdir(INSTALL_DIR):
    while (response := input(f"The directory {INSTALL_DIR} exists and is not empty, its contents will be deleted, would you like to continue installation? (y/n)").upper()) not in ("Y","N"):
        continue
    if response == "Y":
        for file in glob.glob(INSTALL_DIR+"/*"):
            run_without_error(cmd=["rm", "-r", file],
                            error_msg=f"Encountered an error while deleting the contents of {file}")
    else:
        log.info("Exiting.")
        exit(0)
elif not os.path.exists(INSTALL_DIR):
    run_without_error(cmd=["mkdir", INSTALL_DIR], error_msg=f"Could not make dir {INSTALL_DIR}")

run_without_error(cmd=["virtualenv", "-q", "-p", "/usr/bin/python3", VENV],
                  error_msg="Unable to create the virtual environment.")
run_without_error(cmd=["cp", "-r",
                       f"{PROJECT_ROOT}/core",
                       f"{PROJECT_ROOT}/resources",
                       f"{PROJECT_ROOT}/plugin",
                       f"{PROJECT_ROOT}/scripts/uninstall",
                       f"{PROJECT_ROOT}/no_doze.py",
                       INSTALL_DIR], error_msg=f"Unable to transfer source files to {INSTALL_DIR}.")
run_without_error(cmd=[f"{VENV_BIN}/pip", "install", "-r", f"{PROJECT_ROOT}/requirements.txt"],
                  error_msg="An error occurred while installing dependencies.")

### Prepare systemd
run_without_error(cmd=["cp", f"{SCRIPTS_DIR}/no-doze.service", "/etc/systemd/system"],
                  error_msg="Unable to transfer the systemd unit file.")
run_without_error(cmd=["systemctl", "daemon-reload"], error_msg="Unable to reload daemons")

while (response := input(f"Would you like NoDoze to autostart on boot (i.e. systemd enable)? (y/n)").upper()) not in ("Y", "N"):
    continue
if response == "Y":
    run_without_error(cmd=["systemctl", "enable", "no-doze.service"], error_msg="Unable to enable the no-doze service.")
else:
    log.info("Run 'systemd enable no-doze.service' whenever you'd like no-doze to autostart")
# pro tips
log.info(f"To configure no-doze check out {INSTALL_DIR+'/resources/config.yml'}" )
log.info("To start NoDoze run: 'systemctl start no-doze.service'")
log.info("To check the status of NoDoze, run: 'journalctl -u no-doze.service --follow'")
log.info("Installation completed successfully.")

